# The r2 correlation coefficient was used, as this requires SNPs to be both linked 
# and common.
# Firstly, calculate the r2 value using genotypes (0,1,2) via VCFtools v0.1.14 
# (Danecek et al., 2011). If necessary, first remove individuals with a large 
# amount of missing data as these individuals could affect the analysis. 

vcftools-0.1.14 \
--vcf <file_name>.vcf \
--out <output_directory> \
--geno-r2

# Also calculate the intercontig r2 values:

vcftools-0.1.14 \
--vcf <file_name>.vcf \
--out <output_directory> \
--interchrom-geno-r2

# Load the files into R. Calculate the mean r2 values for each. Remove any lines
# which contain ‘NA’:

LD_noNAN<-subset(LD, LD$R.2 != "NaN")
summary(LD_noNAN)

#Make a column of the distance between SNPs:

LD_noNAN$dist<-LD_noNAN$POS2-LD_noNAN$POS1

# To calculate and plot the linkage decay I used a script by Fabio Marroni, 
# accessible at: https://fabiomarroni.wordpress.com/2011/08/09/estimate-
# decay-of-linkage-disequilibrium-with-distance/

distance<-LD_noNAN$dist
LD.data<-LD_noNAN$R.2

#Calculate the number of chromosomes you expect.
#62-8=54! 
#So n<-54*2 (diploid)

n<-108

HW.st<-c(C=0.1)

HW.nonlinear<-nls(LD.data~((10+C*distance)/((2+C*distance)*(11+C*distance)))*(1+((3+C*distance)*(12+12*C*distance+(C*distance)^2))/(n*(2+C*distance)*(11+C*distance))),start=HW.st,control=nls.control(maxiter=100))
tt<-summary(HW.nonlinear)

tt

new.rho<-tt$parameters[1]

# The below give you a set of points

fpoints<-((10+new.rho*distance)/((2+new.rho*distance)*(11+new.rho*distance)))*(1+((3+new.rho*distance)*(12+12*new.rho*distance+(new.rho*distance)^2))/(n*(2+new.rho*distance)*(11+new.rho*distance)))

################### Calculating the half decay distance

df<-data.frame(distance,fpoints)
maxld<-max(LD.data)

# You could elucubrate if it's better to use the maximum ESTIMATED value of LD
# In that case you just set: maxld<-max(fpoints)

h.decay<-maxld/2
half.decay.distance<-df$distance[which.min(abs(df$fpoints-h.decay))]

half.decay.distance

# Distance to the 'intercontig mean LD r2 value' (replace the value for the 
# h.decay):

h.decay<-0.0206
half.decay.distance<-df$distance[which.min(abs(df$fpoints-h.decay))]

half.decay.distance

################ To plot it
ld.df<-data.frame(distance,fpoints)
ld.df<-ld.df[order(ld.df$distance),]

tiff("LD_decay_plot.pdf", width = 580,height = 580)
plot(distance,LD.data,pch=19,cex=0.9, col=alpha("red", 0.2), xlab="Distance (bp)", ylab="LD (r2)", cex.lab=1.3, cex.axis=1.3)
lines(ld.df$distance,ld.df$fpoints,lty=3,lwd=7, col="black")
dev.off()
